# =================================================================
# AZURE PIPELINE PARA "CENTAVO" (DJANGO) - VERSIÓN DE ZIP DEPLOY
# Versión: 2.0 (Estrategia Simplificada)
# =================================================================

trigger:
- main

variables:
  azureSubscription: 'Azure-Subscription-Connection'
  appName: 'app-centavo'
  resourceGroup: 'rg-centavo'
  vmImageName: 'ubuntu-latest'
  pythonVersion: '3.11'

stages:
- stage: Build
  displayName: 'Build and Package'
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    # No instalamos nada. Solo empaquetamos el código fuente.
    - task: ArchiveFiles@2
      displayName: 'Archive source code'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true

    # Publicamos el .zip para que el stage de Deploy lo pueda usar.
    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifact for deployment'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy to Azure'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: DeployJob
    pool:
      vmImage: $(vmImageName)
    steps:
    # Desplegamos el .zip. Azure se encargará del resto.
    - task: AzureWebApp@1
      displayName: 'Deploy to Azure App Service'
      inputs:
        azureSubscription: $(azureSubscription)
        appName: $(appName)
        resourceGroupName: $(resourceGroup)
        package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'